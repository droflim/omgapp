<%- include("template/cabecera", {tituloWeb: 'Página de Inicio Cliente'})  %> 

<div>
 
    <div style="background-color: #FFC012; height:100%; width:100%;">
        <input type="text" id="orign" placeholder="origin" value="2 poniente 648 viña del mar">
        <input type="text" id="destn" placeholder="destination" >
        <div id="total"></div>
        <br>
        <div id="map-canvas"></div>
      </div>
      <!-- Replace the value of the key parameter with your own API key. -->
      <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCkUOdZ5y7hMm0yrcCQoCvLwzdM6M8s5qk&libraries=places&callback=initMap" async defer></script>
    
  </div>
    <div class="container">
        <h1 class="text-center" style="font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;">Inventario Bodega</h1>
        <hr>
        <a class="btn btn-primary" href="/inventario/agregarMaterial" ROLE="button">
            Ingresar nuevo Material
        </a>
        <button onclick="myFunction()" id="botones">Mostrar/Ocultar Deficit Materiales</button>
    

    </div>
    <script>
        let boton = document.getElementById("botones")
        boton.addEventListener("click", function (params) {
           var els=  document.getElementsByClassName("container2")
          
           for(var i=0; i< els.length; i++){
        els[i].style.display = els[i].style.display === 'block' ? 'none' : 'block';
       
    }
    
    
        }
          
        )
    
      
    </script>

<script>
    function initMap() {
  var map = new google.maps.Map(document.getElementById('map-canvas'), {
    center: {
      lat: 19.4978,
      lng: -99.1269
    },
    zoom: 15
  });

  var marker = new google.maps.Marker({
    map: map,
    draggable: false
  });


  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(function(position) {
      initialLocation = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
      map.setCenter(initialLocation);
      /*marker.setPosition(initialLocation);         */
    });
  }

  new AutocompleteDirectionsHandler(map);
}

/**
 * @constructor
 */
function AutocompleteDirectionsHandler(map) {
  this.map = map;
  this.originPlaceId = null;
  this.destinationPlaceId = null;
  this.travelMode = 'DRIVING';
  this.directionsService = new google.maps.DirectionsService();
  this.directionsRenderer = new google.maps.DirectionsRenderer();
  this.directionsRenderer.setMap(map);

  var originInput = document.getElementById('orign');
  var destinationInput = document.getElementById('destn');

  var originAutocomplete = new google.maps.places.SearchBox(originInput);

  var destinationAutocomplete =
    new google.maps.places.SearchBox(destinationInput);

  this.setupPlaceChangedListener(originAutocomplete, 'ORIG');
  this.setupPlaceChangedListener(destinationAutocomplete, 'DEST');

}


AutocompleteDirectionsHandler.prototype.setupPlaceChangedListener = function(
  autocomplete, mode) {
  var me = this;
  autocomplete.bindTo('bounds', this.map);

  autocomplete.addListener('places_changed', function() {
    var places = autocomplete.getPlaces();
    var place = places[0];

    if (!place.place_id) {
      window.alert('Please select an option from the dropdown list.');
      return;
    }
    if (mode === 'ORIG') {
      me.originPlaceId = place.place_id;
    } else {
      me.destinationPlaceId = place.place_id;
    }
    me.route();
  });
};

AutocompleteDirectionsHandler.prototype.route = function() {
  if (!this.originPlaceId || !this.destinationPlaceId) {
    return;
  }
  var me = this;

  this.directionsService.route({
      origin: {
        'placeId': this.originPlaceId
      },
      destination: {
        'placeId': this.destinationPlaceId
      },
      travelMode: this.travelMode
    },
    function(response, status) {
      if (status === 'OK') {
        me.directionsRenderer.setDirections(response);
        computeTotalDistance(response);
      } else {
        window.alert('Directions request failed due to ' + status);
      }
    });
};
// from Google Maps API: Total distance with waypoints
// https://stackoverflow.com/questions/12802202/google-maps-api-total-distance-with-waypoints
function computeTotalDistance(result) {
  var totalDist = 0;
  var totalTime = 0;
  var myroute = result.routes[0];
  for (i = 0; i < myroute.legs.length; i++) {
    totalDist += myroute.legs[i].distance.value;
    totalTime += myroute.legs[i].duration.value;
  }
  totalDist = totalDist / 1000.
  document.getElementById("total").innerHTML = "total distance is: " + totalDist + " km<br>total time is: " + (totalTime / 60).toFixed(2) + " minutes";
}
</script>

<style>
    #map-canvas {
  height: 80%;
}


/* Optional: Makes the sample page fill the window. */

html,
body {
  height: 100%;
  margin: 0;
  padding: 0;
}
</style>
    
    <div class="container">
        <input type="text" id="myInput" onkeyup="myFunction()" placeholder="Buscar Producto.." title="Type in a name">
        <div class="container-fluid">
        <table class="table" style="background-color: white !important; border-radius: 8px; width: 50%; " id="myTable">

            <tr class="header">
          
                <th scope="col" >MATERIAL</th>
                <th scope="col" >CANTIDAD</th>
                <th scope="col" >PRECIO</th>
                <th scope="col" >FECHA</th>
                <th scope="col pro" >EDICION</th>
                
            </th>
    
                <div>
                    <% if (arrayClientes.length>0) { %>
                        <% arrayClientes.forEach( inventario => { %>
                     
                            <tr >
                                <td><%= inventario.nombreMaterial %></td>

                                <% var i =  inventario.Cantidad   %>
                              
                                <td><%= inventario.Cantidad %></td>
                                  
                                
                              <td><%= inventario.Precio %></td>
                                <td><%= inventario.Fecha %></td>
               
                 <% if(inventario.Cantidad < 4) { %>
                      <% console.log(inventario.nombreMaterial) %>
                      <div  class="container2"  style="display: none;"><%= inventario.nombreMaterial %> <%= inventario.Cantidad%></div>
                    
                    <%} %>
                    
                    
                                <th>
                                    <a class="btn btn-primary btn-sm" href="inventario/verMaterial/<%= inventario.id %>" rol="button" ">
                                        Modificar Material
                                    </a>
                                    <a class="btn btn-danger btn-sm" href="javascript:eliminar('<%= inventario.id %>');" rol="button">
                                        Eliminar Material
                                    </a>
                                    
                                </th>
                            </tr>
                        <% }) %>
                        
                    <% } %>
                </div>

  

        </table>
    </div>
    </div>
    <script>
        function Sumar(params) {
            let boton = document.getElementById("boton")
            boton.addEventListener("click", function (params) {
              let cantidad =  " <%= Cantidad %> " 
              console.log(cantidad)
            })

        }
       
    </script>



    <script>
        async function eliminar(paramID) {

            try {
                
                const data = await fetch(`/inventario/${paramID}`, {
                    method: 'delete'
                });

                window.location.href = '/inventario';

            } catch (error) {
                console.log(error);
            }

        }
    </script>
       <script>
        function myFunction() {
          var input, filter, table, tr, td, i, txtValue;
          input = document.getElementById("myInput");
          filter = input.value.toUpperCase();
          table = document.getElementById("myTable");
          tr = table.getElementsByTagName("tr");
          for (i = 0; i < tr.length; i++) {
            td = tr[i].getElementsByTagName("td")[0];
            if (td) {
              txtValue = td.textContent || td.innerText;
              if (txtValue.toUpperCase().indexOf(filter) > -1) {
                tr[i].style.display = "";
              } else {
                tr[i].style.display = "none";
              }
            }       
          }
        }
                </script>
                <style>
  @media only screen and (max-width: 760px), (min-device-width: 768px) and (max-device-width: 1024px)
        {

 tr {
                    /* Behave  like a "row" */
                    border: none;
                    border-bottom: 1px solid #eee;
                    position: relative;
                    padding-left: 50% !important; /* Added important here */
                    width: 50%;
                }


}
                </style>
              <style>   
            td {
                width: 10% !important;
            }
            .logoright {
  text-align: right !important;
  top: 40px;
}
            </style>

            <style>
                @media screen and (min-device-width: 200px) and (max-device-width: 568px) { 
   .table {
    font-size: 7px;
   }

   .btn-sm {
    font-size: 7px;
   }
}
            </style>
            <script>

function initAutocomplete() {
    const map = new google.maps.Map(document.getElementById("map"), {
      center: { lat: -33.8688, lng: 151.2195 },
      zoom: 13,
      mapTypeId: "roadmap",
    });
    // Create the search box and link it to the UI element.
    const input = document.getElementById("pac-input");
    const searchBox = new google.maps.places.SearchBox(input);
  
    map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
    // Bias the SearchBox results towards current map's viewport.
    map.addListener("bounds_changed", () => {
      searchBox.setBounds(map.getBounds());
    });
  
    let markers = [];
  
    // Listen for the event fired when the user selects a prediction and retrieve
    // more details for that place.
    searchBox.addListener("places_changed", () => {
      const places = searchBox.getPlaces();
  
      if (places.length == 0) {
        return;
      }
  
      // Clear out the old markers.
      markers.forEach((marker) => {
        marker.setMap(null);
      });
      markers = [];
  
      // For each place, get the icon, name and location.
      const bounds = new google.maps.LatLngBounds();
  
      places.forEach((place) => {
        if (!place.geometry || !place.geometry.location) {
          console.log("Returned place contains no geometry");
          return;
        }
  
        const icon = {
          url: place.icon,
          size: new google.maps.Size(71, 71),
          origin: new google.maps.Point(0, 0),
          anchor: new google.maps.Point(17, 34),
          scaledSize: new google.maps.Size(25, 25),
        };
  
        // Create a marker for each place.
        markers.push(
          new google.maps.Marker({
            map,
            icon,
            title: place.name,
            position: place.geometry.location,
          }),
        );
        if (place.geometry.viewport) {
          // Only geocodes have viewport.
          bounds.union(place.geometry.viewport);
        } else {
          bounds.extend(place.geometry.location);
        }
      });
      map.fitBounds(bounds);
    });
  }
  
  window.initAutocomplete = initAutocomplete;
</script>
<style>
    /* 
 * Always set the map height explicitly to define the size of the div element
 * that contains the map. 
 */
#map {
  height: 100%;
}

/* 
 * Optional: Makes the sample page fill the window. 
 */
html,
body {
  height: 100%;
  margin: 0;
  padding: 0;
}

#description {
  font-family: Roboto;
  font-size: 15px;
  font-weight: 300;
}

#infowindow-content .title {
  font-weight: bold;
}

#infowindow-content {
  display: none;
}

#map #infowindow-content {
  display: inline;
}

.pac-card {
  background-color: #fff;
  border: 0;
  border-radius: 2px;
  box-shadow: 0 1px 4px -1px rgba(0, 0, 0, 0.3);
  margin: 10px;
  padding: 0 0.5em;
  font: 400 18px Roboto, Arial, sans-serif;
  overflow: hidden;
  font-family: Roboto;
  padding: 0;
}

#pac-container {
  padding-bottom: 12px;
  margin-right: 12px;
}

.pac-controls {
  display: inline-block;
  padding: 5px 11px;
}

.pac-controls label {
  font-family: Roboto;
  font-size: 13px;
  font-weight: 300;
}

#pac-input {
  background-color: #fff;
  font-family: Roboto;
  font-size: 15px;
  font-weight: 300;
  margin-left: 12px;
  padding: 0 11px 0 13px;
  text-overflow: ellipsis;
  width: 400px;
}

#pac-input:focus {
  border-color: #4d90fe;
}

#title {
  color: #fff;
  background-color: #4d90fe;
  font-size: 25px;
  font-weight: 500;
  padding: 6px 12px;
}

#target {
  width: 345px;
}
</style>
<%- include("template/footer") %>


